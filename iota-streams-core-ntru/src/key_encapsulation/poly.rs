//use std::cmp::{Eq, Ord, PartialEq, PartialOrd};
use std::{
    convert::{
        From,
        Into,
        TryFrom,
        TryInto,
    },
    fmt,
    ops,
    result,
};

use iota_streams_core::tbits::{
    trinary::*,
    *,
};

use serde::{Serialize, Deserialize, Serializer};

#[derive(PartialEq, Eq, PartialOrd, Ord, Copy, Clone, Debug, Serialize, Deserialize)]
pub struct PolyCoeff(pub u16);

#[derive(PartialEq, Eq, Copy, Clone, Debug, Serialize, Deserialize)]
pub struct PolyDCoeff(pub u32);

impl From<PolyCoeff> for PolyDCoeff {
    fn from(c: PolyCoeff) -> PolyDCoeff {
        PolyDCoeff(c.0 as u32)
    }
}

/// Prime modulus q = 3*2^12+1
/// Some algorithms are specifically crafted for this value
const Q: u16 = 12289;

/// Degree `n` of polynomial `m(x) = (x^n+1)`
const N_LOG: usize = 10;
const N: usize = 1 << N_LOG;

//const COEFF_GAMMA: PolyCoeff = 4059;
//const COEFF_GAMMA_INV: PolyCoeff = 2340;
//const COEFF_OMEGA: PolyCoeff = 3835;
//const COEFF_OMEGA_INV: PolyCoeff = 5601;
//const COEFF_N: PolyCoeff = 10924;
const COEFF_N_INV: PolyCoeff = PolyCoeff(64);
const COEFF_ZERO: PolyCoeff = PolyCoeff(0);
const COEFF_ONE: PolyCoeff = PolyCoeff(4091);
const COEFF_MINUS_ONE: PolyCoeff = PolyCoeff(Q - COEFF_ONE.0);

/// R = 2¹⁶.
const MRED_R_LOG: usize = 16;
/// R⁻¹ = 9 2⁸ ≡ 2304 (mod q).
const MRED_RI: PolyCoeff = PolyCoeff(2304);
/// q⁻¹ q - R R⁻¹ = 1
const MRED_Q_INV: PolyCoeff = PolyCoeff(12287);

fn coeff_mredd(m: PolyDCoeff) -> PolyCoeff {
    // q⁻¹ = 3*2^12 - 1
    let m0 = m.0 as u16;
    let s: PolyCoeff = PolyCoeff((m0 as u32 * MRED_Q_INV.0 as u32) as u16);
    //s = (s << 12) + (s << 13) - s;

    // q = 3*2^12 + 1
    let k: PolyDCoeff = PolyDCoeff(m.0 + s.0 as u32 * Q as u32);
    //k = m + (s << 12) + (s << 13) + s;

    // r := k div R
    let t: PolyCoeff = PolyCoeff((k.0 >> MRED_R_LOG) as u16);
    let r: PolyCoeff = if t.0 < Q { t } else { PolyCoeff(t.0 - Q) };
    assert!(r.0 < Q);

    r
}

fn check_trint9_coeff_range(t: Trint9) -> bool {
    const R: i16 = ((Q - 1) / 2) as i16;
    -R <= t.0 && t.0 <= R
}

fn coeff_from_trint9(t: Trint9) -> PolyCoeff {
    // `t*R (mod q)`
    let d = (if t.0 < 0 { t.0 + (Q as i16) } else { t.0 }) as u32;
    PolyCoeff(((d << MRED_R_LOG) % (Q as u32)) as u16)
}

/*
impl From<Trint9> for PolyCoeff {
    fn from(t: Trint9) -> PolyCoeff {
        debug_assert!(check_trint9_coeff_range(t));
        coeff_from_trint9(t)
    }
}
*/

/// Convert integer into internal polynomial coefficient representation.
/// The input integer must be within the range [-(Q-1)/2,...,(Q-1)/2].
impl TryFrom<Trint9> for PolyCoeff {
    type Error = ();
    fn try_from(t: Trint9) -> result::Result<PolyCoeff, ()> {
        if check_trint9_coeff_range(t) {
            Ok(coeff_from_trint9(t))
        } else {
            Err(())
        }
    }
}

fn coeff_to_trint9(c: PolyCoeff) -> Trint9 {
    // `c/R (mods q)`
    let d = PolyDCoeff((c.0 as u32) * (MRED_RI.0 as u32));
    let e = (d.0 % (Q as u32)) as i16;

    if ((Q as i16) - 1) / 2 < e {
        Trint9(e - (Q as i16))
    } else {
        Trint9(e)
    }
}

/// Convert internal polynomial coefficient representation into an integer.
/// The output integer will be within the range [-(Q-1)/2,...,(Q-1)/2].
impl From<PolyCoeff> for Trint9 {
    fn from(c: PolyCoeff) -> Trint9 {
        coeff_to_trint9(c)
    }
}

impl From<Trint1> for PolyCoeff {
    fn from(t: Trint1) -> PolyCoeff {
        debug_assert!(-1 <= t.0 && t.0 <= 1);
        if 0 < t.0 {
            COEFF_ONE
        } else if t.0 < 0 {
            COEFF_MINUS_ONE
        } else {
            COEFF_ZERO
        }
    }
}

impl ops::Add for PolyCoeff {
    type Output = PolyCoeff;

    /// a + b (mods q)
    fn add(self, b: PolyCoeff) -> PolyCoeff {
        // u = a + b mod R
        let c = self.0 + b.0;
        let r = if c < Q { c } else { c - Q };
        PolyCoeff(r)
    }
}

impl ops::Sub for PolyCoeff {
    type Output = PolyCoeff;

    /// a - b (mods q)
    fn sub(self, b: PolyCoeff) -> PolyCoeff {
        // u = a - b mod R
        let c = if self.0 < b.0 { Q + self.0 - b.0 } else { self.0 - b.0 };
        PolyCoeff(c)
    }
}

impl ops::Mul for PolyCoeff {
    type Output = PolyCoeff;

    /// a * b (mods q)
    fn mul(self, b: PolyCoeff) -> PolyCoeff {
        coeff_mredd(PolyDCoeff(self.0 as u32 * b.0 as u32))
    }
}

fn coeff_inv(a: PolyCoeff) -> PolyCoeff {
    let mut e: PolyCoeff = a;
    let mut t: PolyCoeff;

    debug_assert!(0 != a.0);
    debug_assert!(Q == ((3 * (1 << 12)) + 1));
    // q-2 = 10111111111111b

    for _ in 0..11 {
        t = e * e;
        e = t * a;
    }

    t = e * a;
    t = t * t;
    e = t * e;

    debug_assert_eq!(COEFF_ONE, e * a);
    e
}

#[derive(Copy, Clone, Deserialize)]
pub struct Poly {
    coeffs: [PolyCoeff; N],
}

impl Serialize for Poly {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        serializer.serialize_i32(*self)
    }
}

impl PartialEq for Poly {
    fn eq(&self, other: &Self) -> bool {
        for i in 0..N {
            if self.coeffs[i] != other.coeffs[i] {
                return false;
            }
        }
        true
    }
}
impl Eq for Poly {}

impl Poly {
    pub fn new() -> Self {
        Self {
            coeffs: [COEFF_ZERO; N],
        }
    }
    pub fn round_small(&mut self) {
        for i in 0..N {
            let t = Trint9::from(self.coeffs[i]);
            self.coeffs[i] = (mods1(t.0 as i32).0).into();
        }
    }
    pub fn small3_add1(&mut self) {
        self.coeffs[0].0 += COEFF_ONE.0;
        if self.coeffs[0].0 > (Q - 1) / 2 {
            self.coeffs[0].0 -= Q;
        }
    }
    pub fn small_mul3(&mut self) {
        for i in 0..N {
            let c = self.coeffs[i];
            self.coeffs[i] = c + c + c;
        }
    }
    pub fn add(&mut self, g: &Self) {
        for i in 0..N {
            self.coeffs[i] = self.coeffs[i] + g.coeffs[i];
        }
    }
    pub fn add_small<TW>(&mut self, mut t: TbitSlice<TW>)
    where
        TW: TritWord,
    {
        assert_eq!(N, t.size());

        for i in 0..N {
            self.coeffs[i] = self.coeffs[i] + t.get1().into();
            t = t.drop(1);
        }
    }
    pub fn sub(&mut self, g: &Self) {
        for i in 0..N {
            self.coeffs[i] = self.coeffs[i] - g.coeffs[i];
        }
    }
    pub fn sub_small<TW>(&mut self, mut t: TbitSlice<TW>)
    where
        TW: TritWord,
    {
        assert_eq!(N, t.size());

        for i in 0..N {
            self.coeffs[i] = self.coeffs[i] - t.get1().into();
            t = t.drop(1);
        }
    }
    pub fn conv(&mut self, g: &Self) {
        for i in 0..N {
            self.coeffs[i] = self.coeffs[i] * g.coeffs[i];
        }
    }
    // `self` must be in NTT form
    pub fn has_inv(&self) -> bool {
        for i in 0..N {
            if COEFF_ZERO == self.coeffs[i] {
                return false;
            }
        }
        true
    }
    pub fn inv(&mut self) {
        for i in 0..N {
            self.coeffs[i] = coeff_inv(self.coeffs[i]);
        }
    }
    /// tⱼ = f(γ²ʲ⁺¹) ≡ Σᵢfᵢγ⁽²ʲ⁺¹⁾ⁱ
    pub fn ntt(&mut self) {
        let mut u = Self::new();

        for i in 0..N {
            //self.coeffs[i] = coeff_inv(self.coeffs[i]);
            u.coeffs[IDX_REV[i]] = gamma_exp(i) * self.coeffs[i];
        }

        for i in (0..N_LOG).rev() {
            for j in 0..N / 2 {
                let r = j & !(((1 as usize) << i) - 1);
                //r = j - (j % (1 << i));

                let c = u.coeffs[j + j];
                let d = u.coeffs[j + j + 1] * gamma_exp(r + r);
                self.coeffs[j] = c + d;
                self.coeffs[j + N / 2] = c - d;
            }
            for j in 0..N {
                u.coeffs[j] = self.coeffs[j];
            }
        }
    }
    /// fₖ = γ⁻ᵏn⁻¹ t(γ⁻²ᵏ)
    ///
    /// t(γ⁻²ᵏ)
    /// ≡ Σⱼtⱼγ⁻²ᵏʲ
    /// ≡ Σⱼ(Σᵢfᵢγ⁽²ʲ⁺¹⁾ⁱ)γ⁻²ᵏʲ
    /// ≡ Σᵢfᵢ(Σⱼγ⁽²ʲ⁺¹⁾ⁱ⁻²ᵏʲ)
    /// ≡ Σᵢfᵢγⁱ(Σⱼγ²ʲ⁽ⁱ⁻ᵏ⁾)
    /// ≡ fₖγᵏn
    pub fn intt(&mut self) {
        let mut u = Self::new();

        for i in 0..N {
            u.coeffs[IDX_REV[i]] = self.coeffs[i];
        }

        for i in (0..N_LOG).rev() {
            for j in 0..N / 2 {
                let r = j & !(((1 as usize) << i) - 1);
                //r = j - (j % (1 << i));

                let c = u.coeffs[j + j];
                let d = u.coeffs[j + j + 1] * gamma_exp(2 * N - (r + r));
                self.coeffs[j] = c + d;
                self.coeffs[j + N / 2] = c - d;
            }
            for j in 0..N {
                u.coeffs[j] = self.coeffs[j];
            }
        }

        for i in 0..N {
            // TODO: precomp γ⁻ⁱn⁻¹?
            let c = COEFF_N_INV * gamma_exp(2 * N - i);
            self.coeffs[i] = c * self.coeffs[i];
        }
    }

    pub fn round_to_trits<TW>(&self, t: &mut TbitSliceMut<TW>)
    where
        TW: TritWord,
    {
        assert_eq!(N, t.size());

        for i in 0..N {
            let c = Trint9::from(self.coeffs[i]);
            t.put1(mods1(c.0 as i32).0);
            t.advance(1);
        }
    }
    pub fn round_to_trits2<TW>(&self, mut t: TbitSliceMut<TW>)
    where
        TW: TritWord,
    {
        self.round_to_trits(&mut t);
    }
    pub fn small_from_trits<TW>(&mut self, mut t: TbitSlice<TW>)
    where
        TW: TritWord,
    {
        assert_eq!(N, t.size());

        for i in 0..N {
            self.coeffs[i] = t.get1().into();
            t = t.drop(1);
        }
    }
    pub fn from_trits<TW>(&mut self, mut t: TbitSlice<TW>) -> bool
    where
        TW: TritWord,
    {
        assert_eq!(9 * N, t.size());

        for i in 0..N {
            if let Ok(c) = t.get9().try_into() {
                self.coeffs[i] = c;
            } else {
                return false;
            }
            t = t.drop(9);
        }
        true
    }
    pub fn to_trits<TW>(&self, t: &mut TbitSliceMut<TW>)
    where
        TW: TritWord,
    {
        assert_eq!(9 * N, t.size());

        for i in 0..N {
            t.put9(self.coeffs[i].into());
            t.advance(9);
        }
    }
    pub fn to_trits2<TW>(&self, mut t: TbitSliceMut<TW>)
    where
        TW: TritWord,
    {
        self.to_trits(&mut t);
    }

    #[cfg(test)]
    fn mul(&mut self, g: &Self) {
        let mut fg: [PolyCoeff; 2 * N - 1] = [COEFF_ZERO; 2 * N - 1];

        for i in 0..N {
            for j in 0..N {
                fg[i + j] = (self.coeffs[i] * g.coeffs[j]) + fg[i + j];
            }
        }

        for i in 0..N - 1 {
            self.coeffs[i] = fg[i] - fg[i + N];
        }
        self.coeffs[N - 1] = fg[N - 1];
    }
    #[cfg(test)]
    fn eval(&self, x: PolyCoeff) -> PolyCoeff {
        let mut r = COEFF_ZERO;
        for i in (0..N).rev() {
            r = (x * r) + self.coeffs[i];
        }
        r
    }
    #[cfg(test)]
    fn ntt2(&self, t: &mut Self) {
        for i in 0..N {
            t.coeffs[i] = self.eval(gamma_exp(i + i + 1));
        }
    }
    #[cfg(test)]
    fn intt2(&self, f: &mut Self) {
        for i in 0..N {
            f.coeffs[i] = COEFF_N_INV * gamma_exp(2 * N - i) * self.eval(gamma_exp(2 * N - (i + i)));
        }
    }
}

impl fmt::Display for Poly {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        for i in 0..N {
            write!(f, "{} ", self.coeffs[i].0)?;
        }
        Ok(())
    }
}

impl fmt::Debug for Poly {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        for i in 0..N {
            if let Err(e) = write!(f, "{:?} ", self.coeffs[i]) {
                return Err(e);
            }
        }
        Ok(())
    }
}

const fn gamma_exp(d: usize) -> PolyCoeff {
    PolyCoeff(GAMMA_EXP[d])
}

const GAMMA_EXP: [u16; 2 * N + 1] = [
    4091, 4059, 3835, 2267, 3580, 482, 3374, 11329, 5569, 2116, 2523, 5372, 737, 5159, 11535, 7011, 12210, 11736, 8418,
    9770, 6945, 11748, 8502, 10358, 11061, 3693, 1273, 8911, 932, 6524, 8801, 162, 1134, 7938, 6410, 8003, 6865, 11188,
    4582, 7496, 3316, 10923, 2727, 6800, 10733, 1397, 9779, 7008, 12189, 11589, 7389, 2567, 5680, 2893, 7962, 6578,
    9179, 2808, 7367, 2413, 4602, 7636, 4296, 5494, 1591, 11137, 4225, 4997, 10401, 11362, 5800, 3733, 1553, 10871,
    2363, 4252, 5186, 11724, 8334, 9182, 2829, 7514, 3442, 11805, 8901, 862, 6034, 5371, 730, 5110, 11192, 4610, 7692,
    4688, 8238, 8510, 10414, 11453, 6437, 8192, 8188, 8160, 7964, 6592, 9277, 3494, 12169, 11449, 6409, 7996, 6816,
    10845, 2181, 2978, 8557, 10743, 1467, 10269, 10438, 11621, 7613, 4135, 4367, 5991, 5070, 10912, 2650, 6261, 6960,
    11853, 9237, 3214, 10209, 10018, 8681, 11611, 7543, 3645, 937, 6559, 9046, 1877, 850, 5950, 4783, 8903, 876, 6132,
    6057, 5532, 1857, 710, 4970, 10212, 10039, 8828, 351, 2457, 4910, 9792, 7099, 537, 3759, 1735, 12145, 11281, 5233,
    12053, 10637, 725, 5075, 10947, 2895, 7976, 6676, 9865, 7610, 4114, 4220, 4962, 10156, 9647, 6084, 5721, 3180,
    9971, 8352, 9308, 3711, 1399, 9793, 7106, 586, 4102, 4136, 4374, 6040, 5413, 1024, 7168, 1020, 7140, 824, 5768,
    3509, 12274, 12184, 11554, 7144, 852, 5964, 4881, 9589, 5678, 2879, 7864, 5892, 4377, 6061, 5560, 2053, 2082, 2285,
    3706, 1364, 9548, 5391, 870, 6090, 5763, 3474, 12029, 10469, 11838, 9132, 2479, 5064, 10870, 2356, 4203, 4843,
    9323, 3816, 2134, 2649, 6254, 6911, 11510, 6836, 10985, 3161, 9838, 7421, 2791, 7248, 1580, 11060, 3686, 1224,
    8568, 10820, 2006, 1753, 12271, 12163, 11407, 6115, 5938, 4699, 8315, 9049, 1898, 997, 6979, 11986, 10168, 9731,
    6672, 9837, 7414, 2742, 6905, 11468, 6542, 8927, 1044, 7308, 2000, 1711, 11977, 10105, 9290, 3585, 517, 3619, 755,
    5285, 128, 896, 6272, 7037, 103, 721, 5047, 10751, 1523, 10661, 893, 6251, 6890, 11363, 5807, 3782, 1896, 983,
    6881, 11300, 5366, 695, 4865, 9477, 4894, 9680, 6315, 7338, 2210, 3181, 9978, 8401, 9651, 6112, 5917, 4552, 7286,
    1846, 633, 4431, 6439, 8206, 8286, 8846, 477, 3339, 11084, 3854, 2400, 4511, 6999, 12126, 11148, 4302, 5536, 1885,
    906, 6342, 7527, 3533, 153, 1071, 7497, 3323, 10972, 3070, 9201, 2962, 8445, 9959, 8268, 8720, 11884, 9454, 4733,
    8553, 10715, 1271, 8897, 834, 5838, 3999, 3415, 11616, 7578, 3890, 2652, 6275, 7058, 250, 1750, 12250, 12016,
    10378, 11201, 4673, 8133, 7775, 5269, 16, 112, 784, 5488, 1549, 10843, 2167, 2880, 7871, 5941, 4720, 8462, 10078,
    9101, 2262, 3545, 237, 1659, 11613, 7557, 3743, 1623, 11361, 5793, 3684, 1210, 8470, 10134, 9493, 5006, 10464,
    11803, 8887, 764, 5348, 569, 3983, 3303, 10832, 2090, 2341, 4098, 4108, 4178, 4668, 8098, 7530, 3554, 300, 2100,
    2411, 4588, 7538, 3610, 692, 4844, 9330, 3865, 2477, 5050, 10772, 1670, 11690, 8096, 7516, 3456, 11903, 9587, 5664,
    2781, 7178, 1090, 7630, 4254, 5200, 11822, 9020, 1695, 11865, 9321, 3802, 2036, 1963, 1452, 10164, 9703, 6476,
    8465, 10099, 9248, 3291, 10748, 1502, 10514, 12153, 11337, 5625, 2508, 5267, 2, 14, 98, 686, 4802, 9036, 1807, 360,
    2520, 5351, 590, 4130, 4332, 5746, 3355, 11196, 4638, 7888, 6060, 5553, 2004, 1739, 12173, 11477, 6605, 9368, 4131,
    4339, 5795, 3698, 1308, 9156, 2647, 6240, 6813, 10824, 2034, 1949, 1354, 9478, 4901, 9729, 6658, 9739, 6728, 10229,
    10158, 9661, 6182, 6407, 7982, 6718, 10159, 9668, 6231, 6750, 10383, 11236, 4918, 9848, 7491, 3281, 10678, 1012,
    7084, 432, 3024, 8879, 708, 4956, 10114, 9353, 4026, 3604, 650, 4550, 7272, 1748, 12236, 11918, 9692, 6399, 7926,
    6326, 7415, 2749, 6954, 11811, 8943, 1156, 8092, 7488, 3260, 10531, 12272, 12170, 11456, 6458, 8339, 9217, 3074,
    9229, 3158, 9817, 7274, 1762, 45, 315, 2205, 3146, 9733, 6686, 9935, 8100, 7544, 3652, 986, 6902, 11447, 6395,
    7898, 6130, 6043, 5434, 1171, 8197, 8223, 8405, 9679, 6308, 7289, 1867, 780, 5460, 1353, 9471, 4852, 9386, 4257,
    5221, 11969, 10049, 8898, 841, 5887, 4342, 5816, 3845, 2337, 4070, 3912, 2806, 7353, 2315, 3916, 2834, 7549, 3687,
    1231, 8617, 11163, 4407, 6271, 7030, 54, 378, 2646, 6233, 6764, 10481, 11922, 9720, 6595, 9298, 3641, 909, 6363,
    7674, 4562, 7356, 2336, 4063, 3863, 2463, 4952, 10086, 9157, 2654, 6289, 7156, 936, 6552, 8997, 1534, 10738, 1432,
    10024, 8723, 11905, 9601, 5762, 3467, 11980, 10126, 9437, 4614, 7720, 4884, 9610, 5825, 3908, 2778, 7157, 943,
    6601, 9340, 3935, 2967, 8480, 10204, 9983, 8436, 9896, 7827, 5633, 2564, 5659, 2746, 6933, 11664, 7914, 6242, 6827,
    10922, 2720, 6751, 10390, 11285, 5261, 12249, 12009, 10329, 10858, 2272, 3615, 727, 5089, 11045, 3581, 489, 3423,
    11672, 7970, 6634, 9571, 5552, 1997, 1690, 11830, 9076, 2087, 2320, 3951, 3079, 9264, 3403, 11532, 6990, 12063,
    10707, 1215, 8505, 10379, 11208, 4722, 8476, 10176, 9787, 7064, 292, 2044, 2019, 1844, 619, 4333, 5753, 3404,
    11539, 7039, 117, 819, 5733, 3264, 10559, 179, 1253, 8771, 12241, 11953, 9937, 8114, 7642, 4338, 5788, 3649, 965,
    6755, 10418, 11481, 6633, 9564, 5503, 1654, 11578, 7312, 2028, 1907, 1060, 7420, 2784, 7199, 1237, 8659, 11457,
    6465, 8388, 9560, 5475, 1458, 10206, 9997, 8534, 10582, 340, 2380, 4371, 6019, 5266, 12284, 12254, 12044, 10574,
    284, 1988, 1627, 11389, 5989, 5056, 10814, 1964, 1459, 10213, 10046, 8877, 694, 4858, 9428, 4551, 7279, 1797, 290,
    2030, 1921, 1158, 8106, 7586, 3946, 3044, 9019, 1688, 11816, 8978, 1401, 9807, 7204, 1272, 8904, 883, 6181, 6400,
    7933, 6375, 7758, 5150, 11472, 6570, 9123, 2416, 4623, 7783, 5325, 408, 2856, 7703, 4765, 8777, 12283, 12247,
    11995, 10231, 10172, 9759, 6868, 11209, 4729, 8525, 10519, 12188, 11582, 7340, 2224, 3279, 10664, 914, 6398, 7919,
    6277, 7072, 348, 2436, 4763, 8763, 12185, 11561, 7193, 1195, 8365, 9399, 4348, 5858, 4139, 4395, 6187, 6442, 8227,
    8433, 9875, 7680, 4604, 7650, 4394, 6180, 6393, 7884, 6032, 5357, 632, 4424, 6390, 7863, 5885, 4328, 5718, 3159,
    9824, 7323, 2105, 2446, 4833, 9253, 3326, 10993, 3217, 10230, 10165, 9710, 6525, 8808, 211, 1477, 10339, 10928,
    2762, 7045, 159, 1113, 7791, 5381, 800, 5600, 2333, 4042, 3716, 1434, 10038, 8821, 302, 2114, 2509, 5274, 51, 357,
    2499, 5204, 11850, 9216, 3067, 9180, 2815, 7416, 2756, 7003, 12154, 11344, 5674, 2851, 7668, 4520, 7062, 278, 1946,
    1333, 9331, 3872, 2526, 5393, 884, 6188, 6449, 8276, 8776, 12276, 12198, 11652, 7830, 5654, 2711, 6688, 9949, 8198,
    8230, 8454, 10022, 8709, 11807, 8915, 960, 6720, 10173, 9766, 6917, 11552, 7130, 754, 5278, 79, 553, 3871, 2519,
    5344, 541, 3787, 1931, 1228, 8596, 11016, 3378, 11357, 5765, 3488, 12127, 11155, 4351, 5879, 4286, 5424, 1101,
    7707, 4793, 8973, 1366, 9562, 5489, 1556, 10892, 2510, 5281, 100, 700, 4900, 9722, 6609, 9396, 4327, 5711, 3110,
    9481, 4922, 9876, 7687, 4653, 7993, 6795, 10698, 1152, 8064, 7292, 1888, 927, 6489, 8556, 10736, 1418, 9926, 8037,
    7103, 565, 3955, 3107, 9460, 4775, 8847, 484, 3388, 11427, 6255, 6918, 11559, 7179, 1097, 7679, 4597, 7601, 4051,
    3779, 1875, 836, 5852, 4097, 4101, 4129, 4325, 5697, 3012, 8795, 120, 840, 5880, 4293, 5473, 1444, 10108, 9311,
    3732, 1546, 10822, 2020, 1851, 668, 4676, 8154, 7922, 6298, 7219, 1377, 9639, 6028, 5329, 436, 3052, 9075, 2080,
    2271, 3608, 678, 4746, 8644, 11352, 5730, 3243, 10412, 11439, 6339, 7506, 3386, 11413, 6157, 6232, 6757, 10432,
    11579, 7319, 2077, 2250, 3461, 11938, 9832, 7379, 2497, 5190, 11752, 8530, 10554, 144, 1008, 7056, 236, 1652,
    11564, 7214, 1342, 9394, 4313, 5613, 2424, 4679, 8175, 8069, 7327, 2133, 2642, 6205, 6568, 9109, 2318, 3937, 2981,
    8578, 10890, 2496, 5183, 11703, 8187, 8153, 7915, 6249, 6876, 11265, 5121, 11269, 5149, 11465, 6521, 8780, 15, 105,
    735, 5145, 11437, 6325, 7408, 2700, 6611, 9410, 4425, 6397, 7912, 6228, 6729, 10236, 10207, 10004, 8583, 10925,
    2741, 6898, 11419, 6199, 6526, 8815, 260, 1820, 451, 3157, 9810, 7225, 1419, 9933, 8086, 7446, 2966, 8473, 10155,
    9640, 6035, 5378, 779, 5453, 1304, 9128, 2451, 4868, 9498, 5041, 10709, 1229, 8603, 11065, 3721, 1469, 10283,
    10536, 18, 126, 882, 6174, 6351, 7590, 3974, 3240, 10391, 11292, 5310, 303, 2121, 2558, 5617, 2452, 4875, 9547,
    5384, 821, 5747, 3362, 11245, 4981, 10289, 10578, 312, 2184, 2999, 8704, 11772, 8670, 11534, 7004, 12161, 11393,
    6017, 5252, 12186, 11568, 7242, 1538, 10766, 1628, 11396, 6038, 5399, 926, 6482, 8507, 10393, 11306, 5408, 989,
    6923, 11594, 7424, 2812, 7395, 2609, 5974, 4951, 10079, 9108, 2311, 3888, 2638, 6177, 6372, 7737, 5003, 10443,
    11656, 7858, 5850, 4083, 4003, 3443, 11812, 8950, 1205, 8435, 9889, 7778, 5290, 163, 1141, 7987, 6753, 10404,
    11383, 5947, 4762, 8756, 12136, 11218, 4792, 8966, 1317, 9219, 3088, 9327, 3844, 2330, 4021, 3569, 405, 2835, 7556,
    3736, 1574, 11018, 3392, 11455, 6451, 8290, 8874, 673, 4711, 8399, 9637, 6014, 5231, 12039, 10539, 39, 273, 1911,
    1088, 7616, 4156, 4514, 7020, 12273, 12177, 11505, 6801, 10740, 1446, 10122, 9409, 4418, 6348, 7569, 3827, 2211,
    3188, 10027, 8744, 12052, 10630, 676, 4732, 8546, 10666, 928, 6496, 8605, 11079, 3819, 2155, 2796, 7283, 1825, 486,
    3402, 11525, 6941, 11720, 8306, 8986, 1457, 10199, 9948, 8191, 8181, 8111, 7621, 4191, 4759, 8735, 11989, 10189,
    9878, 7701, 4751, 8679, 11597, 7445, 2959, 8424, 9812, 7239, 1517, 10619, 599, 4193, 4773, 8833, 386, 2702, 6625,
    9508, 5111, 11199, 4659, 8035, 7089, 467, 3269, 10594, 424, 2968, 8487, 10253, 10326, 10837, 2125, 2586, 5813,
    3824, 2190, 3041, 8998, 1541, 10787, 1775, 136, 952, 6664, 9781, 7022, 12287, 12275, 12191, 11603, 7487, 3253,
    10482, 11929, 9769, 6938, 11699, 8159, 7957, 6543, 8934, 1093, 7651, 4401, 6229, 6736, 10285, 10550, 116, 812,
    5684, 2921, 8158, 7950, 6494, 8591, 10981, 3133, 9642, 6049, 5476, 1465, 10255, 10340, 10935, 2811, 7388, 2560,
    5631, 2550, 5561, 2060, 2131, 2628, 6107, 5882, 4307, 5571, 2130, 2621, 6058, 5539, 1906, 1053, 7371, 2441, 4798,
    9008, 1611, 11277, 5205, 11857, 9265, 3410, 11581, 7333, 2175, 2936, 8263, 8685, 11639, 7739, 5017, 10541, 53, 371,
    2597, 5890, 4363, 5963, 4874, 9540, 5335, 478, 3346, 11133, 4197, 4801, 9029, 1758, 17, 119, 833, 5831, 3950, 3072,
    9215, 3060, 9131, 2472, 5015, 10527, 12244, 11974, 10084, 9143, 2556, 5603, 2354, 4189, 4745, 8637, 11303, 5387,
    842, 5894, 4391, 6159, 6246, 6855, 11118, 4092, 4066, 3884, 2610, 5981, 5000, 10422, 11509, 6829, 10936, 2818,
    7437, 2903, 8032, 7068, 320, 2240, 3391, 11448, 6402, 7947, 6473, 8444, 9952, 8219, 8377, 9483, 4936, 9974, 8373,
    9455, 4740, 8602, 11058, 3672, 1126, 7882, 6018, 5259, 12235, 11911, 9643, 6056, 5525, 1808, 367, 2569, 5694, 2991,
    8648, 11380, 5926, 4615, 7727, 4933, 9953, 8226, 8426, 9826, 7337, 2203, 3132, 9635, 6000, 5133, 11353, 5737, 3292,
    10755, 1551, 10857, 2265, 3566, 384, 2688, 6527, 8822, 309, 2163, 2852, 7675, 4569, 7405, 2679, 6464, 8381, 9511,
    5132, 11346, 5688, 2949, 8354, 9322, 3809, 2085, 2306, 3853, 2393, 4462, 6656, 9725, 6630, 9543, 5356, 625, 4375,
    6047, 5462, 1367, 9569, 5538, 1899, 1004, 7028, 40, 280, 1960, 1431, 10017, 8674, 11562, 7200, 1244, 8708, 11800,
    8866, 617, 4319, 5655, 2718, 6737, 10292, 10599, 459, 3213, 10202, 9969, 8338, 9210, 3025, 8886, 757, 5299, 226,
    1582, 11074, 3784, 1910, 1081, 7567, 3813, 2113, 2502, 5225, 11997, 10245, 10270, 10445, 11670, 7956, 6536, 8885,
    750, 5250, 12172, 11470, 6556, 9025, 1730, 12110, 11036, 3518, 48, 336, 2352, 4175, 4647, 7951, 6501, 8640, 11324,
    5534, 1871, 808, 5656, 2725, 6786, 10635, 711, 4977, 10261, 10382, 11229, 4869, 9505, 5090, 11052, 3630, 832, 5824,
    3901, 2729, 6814, 10831, 2083, 2292, 3755, 1707, 11949, 9909, 7918, 6270, 7023, 5, 35, 245, 1715, 12005, 10301,
    10662, 900, 6300, 7233, 1475, 10325, 10830, 2076, 2243, 3412, 11595, 7431, 2861, 7738, 5010, 10492, 11999, 10259,
    10368, 11131, 4183, 4703, 8343, 9245, 3270, 10601, 473, 3311, 10888, 2482, 5085, 11017, 3385, 11406, 6108, 5889,
    4356, 5914, 4531, 7139, 817, 5719, 3166, 9873, 7666, 4506, 6964, 11881, 9433, 4586, 7524, 3512, 6, 42, 294, 2058,
    2117, 2530, 5421, 1080, 7560, 3764, 1770, 101, 707, 4949, 10065, 9010, 1625, 11375, 5891, 4370, 6012, 5217, 11941,
    9853, 7526, 3526, 104, 728, 5096, 11094, 3924, 2890, 7941, 6431, 8150, 7894, 6102, 5847, 4062, 3856, 2414, 4609,
    7685, 4639, 7895, 6109, 5896, 4405, 6257, 6932, 11657, 7865, 5899, 4426, 6404, 7961, 6571, 9130, 2465, 4966, 10184,
    9843, 7456, 3036, 8963, 1296, 9072, 2059, 2124, 2579, 5764, 3481, 12078, 10812, 1950, 1361, 9527, 5244, 12130,
    11176, 4498, 6908, 11489, 6689, 9956, 8247, 8573, 10855, 2251, 3468, 11987, 10175, 9780, 7015, 12238, 11932, 9790,
    7085, 439, 3073, 9222, 3109, 9474, 4873, 9533, 5286, 135, 945, 6615, 9438, 4621, 7769, 5227, 12011, 10343, 10956,
    2958, 8417, 9763, 6896, 11405, 6101, 5840, 4013, 3513, 13, 91, 637, 4459, 6635, 9578, 5601, 2340, 4091,
];

/// (b₀,b₁,…,bₙ₋₁) → (bₙ₋₁,…,b₁,b₀)
const IDX_REV: [usize; N] = [
    0x000, 0x200, 0x100, 0x300, 0x080, 0x280, 0x180, 0x380, 0x040, 0x240, 0x140, 0x340, 0x0c0, 0x2c0, 0x1c0, 0x3c0,
    0x020, 0x220, 0x120, 0x320, 0x0a0, 0x2a0, 0x1a0, 0x3a0, 0x060, 0x260, 0x160, 0x360, 0x0e0, 0x2e0, 0x1e0, 0x3e0,
    0x010, 0x210, 0x110, 0x310, 0x090, 0x290, 0x190, 0x390, 0x050, 0x250, 0x150, 0x350, 0x0d0, 0x2d0, 0x1d0, 0x3d0,
    0x030, 0x230, 0x130, 0x330, 0x0b0, 0x2b0, 0x1b0, 0x3b0, 0x070, 0x270, 0x170, 0x370, 0x0f0, 0x2f0, 0x1f0, 0x3f0,
    0x008, 0x208, 0x108, 0x308, 0x088, 0x288, 0x188, 0x388, 0x048, 0x248, 0x148, 0x348, 0x0c8, 0x2c8, 0x1c8, 0x3c8,
    0x028, 0x228, 0x128, 0x328, 0x0a8, 0x2a8, 0x1a8, 0x3a8, 0x068, 0x268, 0x168, 0x368, 0x0e8, 0x2e8, 0x1e8, 0x3e8,
    0x018, 0x218, 0x118, 0x318, 0x098, 0x298, 0x198, 0x398, 0x058, 0x258, 0x158, 0x358, 0x0d8, 0x2d8, 0x1d8, 0x3d8,
    0x038, 0x238, 0x138, 0x338, 0x0b8, 0x2b8, 0x1b8, 0x3b8, 0x078, 0x278, 0x178, 0x378, 0x0f8, 0x2f8, 0x1f8, 0x3f8,
    0x004, 0x204, 0x104, 0x304, 0x084, 0x284, 0x184, 0x384, 0x044, 0x244, 0x144, 0x344, 0x0c4, 0x2c4, 0x1c4, 0x3c4,
    0x024, 0x224, 0x124, 0x324, 0x0a4, 0x2a4, 0x1a4, 0x3a4, 0x064, 0x264, 0x164, 0x364, 0x0e4, 0x2e4, 0x1e4, 0x3e4,
    0x014, 0x214, 0x114, 0x314, 0x094, 0x294, 0x194, 0x394, 0x054, 0x254, 0x154, 0x354, 0x0d4, 0x2d4, 0x1d4, 0x3d4,
    0x034, 0x234, 0x134, 0x334, 0x0b4, 0x2b4, 0x1b4, 0x3b4, 0x074, 0x274, 0x174, 0x374, 0x0f4, 0x2f4, 0x1f4, 0x3f4,
    0x00c, 0x20c, 0x10c, 0x30c, 0x08c, 0x28c, 0x18c, 0x38c, 0x04c, 0x24c, 0x14c, 0x34c, 0x0cc, 0x2cc, 0x1cc, 0x3cc,
    0x02c, 0x22c, 0x12c, 0x32c, 0x0ac, 0x2ac, 0x1ac, 0x3ac, 0x06c, 0x26c, 0x16c, 0x36c, 0x0ec, 0x2ec, 0x1ec, 0x3ec,
    0x01c, 0x21c, 0x11c, 0x31c, 0x09c, 0x29c, 0x19c, 0x39c, 0x05c, 0x25c, 0x15c, 0x35c, 0x0dc, 0x2dc, 0x1dc, 0x3dc,
    0x03c, 0x23c, 0x13c, 0x33c, 0x0bc, 0x2bc, 0x1bc, 0x3bc, 0x07c, 0x27c, 0x17c, 0x37c, 0x0fc, 0x2fc, 0x1fc, 0x3fc,
    0x002, 0x202, 0x102, 0x302, 0x082, 0x282, 0x182, 0x382, 0x042, 0x242, 0x142, 0x342, 0x0c2, 0x2c2, 0x1c2, 0x3c2,
    0x022, 0x222, 0x122, 0x322, 0x0a2, 0x2a2, 0x1a2, 0x3a2, 0x062, 0x262, 0x162, 0x362, 0x0e2, 0x2e2, 0x1e2, 0x3e2,
    0x012, 0x212, 0x112, 0x312, 0x092, 0x292, 0x192, 0x392, 0x052, 0x252, 0x152, 0x352, 0x0d2, 0x2d2, 0x1d2, 0x3d2,
    0x032, 0x232, 0x132, 0x332, 0x0b2, 0x2b2, 0x1b2, 0x3b2, 0x072, 0x272, 0x172, 0x372, 0x0f2, 0x2f2, 0x1f2, 0x3f2,
    0x00a, 0x20a, 0x10a, 0x30a, 0x08a, 0x28a, 0x18a, 0x38a, 0x04a, 0x24a, 0x14a, 0x34a, 0x0ca, 0x2ca, 0x1ca, 0x3ca,
    0x02a, 0x22a, 0x12a, 0x32a, 0x0aa, 0x2aa, 0x1aa, 0x3aa, 0x06a, 0x26a, 0x16a, 0x36a, 0x0ea, 0x2ea, 0x1ea, 0x3ea,
    0x01a, 0x21a, 0x11a, 0x31a, 0x09a, 0x29a, 0x19a, 0x39a, 0x05a, 0x25a, 0x15a, 0x35a, 0x0da, 0x2da, 0x1da, 0x3da,
    0x03a, 0x23a, 0x13a, 0x33a, 0x0ba, 0x2ba, 0x1ba, 0x3ba, 0x07a, 0x27a, 0x17a, 0x37a, 0x0fa, 0x2fa, 0x1fa, 0x3fa,
    0x006, 0x206, 0x106, 0x306, 0x086, 0x286, 0x186, 0x386, 0x046, 0x246, 0x146, 0x346, 0x0c6, 0x2c6, 0x1c6, 0x3c6,
    0x026, 0x226, 0x126, 0x326, 0x0a6, 0x2a6, 0x1a6, 0x3a6, 0x066, 0x266, 0x166, 0x366, 0x0e6, 0x2e6, 0x1e6, 0x3e6,
    0x016, 0x216, 0x116, 0x316, 0x096, 0x296, 0x196, 0x396, 0x056, 0x256, 0x156, 0x356, 0x0d6, 0x2d6, 0x1d6, 0x3d6,
    0x036, 0x236, 0x136, 0x336, 0x0b6, 0x2b6, 0x1b6, 0x3b6, 0x076, 0x276, 0x176, 0x376, 0x0f6, 0x2f6, 0x1f6, 0x3f6,
    0x00e, 0x20e, 0x10e, 0x30e, 0x08e, 0x28e, 0x18e, 0x38e, 0x04e, 0x24e, 0x14e, 0x34e, 0x0ce, 0x2ce, 0x1ce, 0x3ce,
    0x02e, 0x22e, 0x12e, 0x32e, 0x0ae, 0x2ae, 0x1ae, 0x3ae, 0x06e, 0x26e, 0x16e, 0x36e, 0x0ee, 0x2ee, 0x1ee, 0x3ee,
    0x01e, 0x21e, 0x11e, 0x31e, 0x09e, 0x29e, 0x19e, 0x39e, 0x05e, 0x25e, 0x15e, 0x35e, 0x0de, 0x2de, 0x1de, 0x3de,
    0x03e, 0x23e, 0x13e, 0x33e, 0x0be, 0x2be, 0x1be, 0x3be, 0x07e, 0x27e, 0x17e, 0x37e, 0x0fe, 0x2fe, 0x1fe, 0x3fe,
    0x001, 0x201, 0x101, 0x301, 0x081, 0x281, 0x181, 0x381, 0x041, 0x241, 0x141, 0x341, 0x0c1, 0x2c1, 0x1c1, 0x3c1,
    0x021, 0x221, 0x121, 0x321, 0x0a1, 0x2a1, 0x1a1, 0x3a1, 0x061, 0x261, 0x161, 0x361, 0x0e1, 0x2e1, 0x1e1, 0x3e1,
    0x011, 0x211, 0x111, 0x311, 0x091, 0x291, 0x191, 0x391, 0x051, 0x251, 0x151, 0x351, 0x0d1, 0x2d1, 0x1d1, 0x3d1,
    0x031, 0x231, 0x131, 0x331, 0x0b1, 0x2b1, 0x1b1, 0x3b1, 0x071, 0x271, 0x171, 0x371, 0x0f1, 0x2f1, 0x1f1, 0x3f1,
    0x009, 0x209, 0x109, 0x309, 0x089, 0x289, 0x189, 0x389, 0x049, 0x249, 0x149, 0x349, 0x0c9, 0x2c9, 0x1c9, 0x3c9,
    0x029, 0x229, 0x129, 0x329, 0x0a9, 0x2a9, 0x1a9, 0x3a9, 0x069, 0x269, 0x169, 0x369, 0x0e9, 0x2e9, 0x1e9, 0x3e9,
    0x019, 0x219, 0x119, 0x319, 0x099, 0x299, 0x199, 0x399, 0x059, 0x259, 0x159, 0x359, 0x0d9, 0x2d9, 0x1d9, 0x3d9,
    0x039, 0x239, 0x139, 0x339, 0x0b9, 0x2b9, 0x1b9, 0x3b9, 0x079, 0x279, 0x179, 0x379, 0x0f9, 0x2f9, 0x1f9, 0x3f9,
    0x005, 0x205, 0x105, 0x305, 0x085, 0x285, 0x185, 0x385, 0x045, 0x245, 0x145, 0x345, 0x0c5, 0x2c5, 0x1c5, 0x3c5,
    0x025, 0x225, 0x125, 0x325, 0x0a5, 0x2a5, 0x1a5, 0x3a5, 0x065, 0x265, 0x165, 0x365, 0x0e5, 0x2e5, 0x1e5, 0x3e5,
    0x015, 0x215, 0x115, 0x315, 0x095, 0x295, 0x195, 0x395, 0x055, 0x255, 0x155, 0x355, 0x0d5, 0x2d5, 0x1d5, 0x3d5,
    0x035, 0x235, 0x135, 0x335, 0x0b5, 0x2b5, 0x1b5, 0x3b5, 0x075, 0x275, 0x175, 0x375, 0x0f5, 0x2f5, 0x1f5, 0x3f5,
    0x00d, 0x20d, 0x10d, 0x30d, 0x08d, 0x28d, 0x18d, 0x38d, 0x04d, 0x24d, 0x14d, 0x34d, 0x0cd, 0x2cd, 0x1cd, 0x3cd,
    0x02d, 0x22d, 0x12d, 0x32d, 0x0ad, 0x2ad, 0x1ad, 0x3ad, 0x06d, 0x26d, 0x16d, 0x36d, 0x0ed, 0x2ed, 0x1ed, 0x3ed,
    0x01d, 0x21d, 0x11d, 0x31d, 0x09d, 0x29d, 0x19d, 0x39d, 0x05d, 0x25d, 0x15d, 0x35d, 0x0dd, 0x2dd, 0x1dd, 0x3dd,
    0x03d, 0x23d, 0x13d, 0x33d, 0x0bd, 0x2bd, 0x1bd, 0x3bd, 0x07d, 0x27d, 0x17d, 0x37d, 0x0fd, 0x2fd, 0x1fd, 0x3fd,
    0x003, 0x203, 0x103, 0x303, 0x083, 0x283, 0x183, 0x383, 0x043, 0x243, 0x143, 0x343, 0x0c3, 0x2c3, 0x1c3, 0x3c3,
    0x023, 0x223, 0x123, 0x323, 0x0a3, 0x2a3, 0x1a3, 0x3a3, 0x063, 0x263, 0x163, 0x363, 0x0e3, 0x2e3, 0x1e3, 0x3e3,
    0x013, 0x213, 0x113, 0x313, 0x093, 0x293, 0x193, 0x393, 0x053, 0x253, 0x153, 0x353, 0x0d3, 0x2d3, 0x1d3, 0x3d3,
    0x033, 0x233, 0x133, 0x333, 0x0b3, 0x2b3, 0x1b3, 0x3b3, 0x073, 0x273, 0x173, 0x373, 0x0f3, 0x2f3, 0x1f3, 0x3f3,
    0x00b, 0x20b, 0x10b, 0x30b, 0x08b, 0x28b, 0x18b, 0x38b, 0x04b, 0x24b, 0x14b, 0x34b, 0x0cb, 0x2cb, 0x1cb, 0x3cb,
    0x02b, 0x22b, 0x12b, 0x32b, 0x0ab, 0x2ab, 0x1ab, 0x3ab, 0x06b, 0x26b, 0x16b, 0x36b, 0x0eb, 0x2eb, 0x1eb, 0x3eb,
    0x01b, 0x21b, 0x11b, 0x31b, 0x09b, 0x29b, 0x19b, 0x39b, 0x05b, 0x25b, 0x15b, 0x35b, 0x0db, 0x2db, 0x1db, 0x3db,
    0x03b, 0x23b, 0x13b, 0x33b, 0x0bb, 0x2bb, 0x1bb, 0x3bb, 0x07b, 0x27b, 0x17b, 0x37b, 0x0fb, 0x2fb, 0x1fb, 0x3fb,
    0x007, 0x207, 0x107, 0x307, 0x087, 0x287, 0x187, 0x387, 0x047, 0x247, 0x147, 0x347, 0x0c7, 0x2c7, 0x1c7, 0x3c7,
    0x027, 0x227, 0x127, 0x327, 0x0a7, 0x2a7, 0x1a7, 0x3a7, 0x067, 0x267, 0x167, 0x367, 0x0e7, 0x2e7, 0x1e7, 0x3e7,
    0x017, 0x217, 0x117, 0x317, 0x097, 0x297, 0x197, 0x397, 0x057, 0x257, 0x157, 0x357, 0x0d7, 0x2d7, 0x1d7, 0x3d7,
    0x037, 0x237, 0x137, 0x337, 0x0b7, 0x2b7, 0x1b7, 0x3b7, 0x077, 0x277, 0x177, 0x377, 0x0f7, 0x2f7, 0x1f7, 0x3f7,
    0x00f, 0x20f, 0x10f, 0x30f, 0x08f, 0x28f, 0x18f, 0x38f, 0x04f, 0x24f, 0x14f, 0x34f, 0x0cf, 0x2cf, 0x1cf, 0x3cf,
    0x02f, 0x22f, 0x12f, 0x32f, 0x0af, 0x2af, 0x1af, 0x3af, 0x06f, 0x26f, 0x16f, 0x36f, 0x0ef, 0x2ef, 0x1ef, 0x3ef,
    0x01f, 0x21f, 0x11f, 0x31f, 0x09f, 0x29f, 0x19f, 0x39f, 0x05f, 0x25f, 0x15f, 0x35f, 0x0df, 0x2df, 0x1df, 0x3df,
    0x03f, 0x23f, 0x13f, 0x33f, 0x0bf, 0x2bf, 0x1bf, 0x3bf, 0x07f, 0x27f, 0x17f, 0x37f, 0x0ff, 0x2ff, 0x1ff, 0x3ff,
];

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn ntt_conv() {
        let mut f = Poly::new();
        let mut g = Poly::new();
        f.coeffs[0] = COEFF_ONE;
        g.coeffs[0] = COEFF_MINUS_ONE;
        let a = COEFF_ONE + COEFF_ONE;
        let b = COEFF_ONE + a;
        let c = COEFF_ONE + (a * b);

        for _ in 0..10 {
            let mut m = f;
            m.mul(&g);

            let mut tm = f;
            let mut tg = g;
            tm.ntt();
            tg.ntt();
            tm.conv(&tg);
            tm.intt();
            tg.intt();

            assert_eq!(m, tm);
            assert_eq!(g, tg);

            for i in 0..N {
                f.coeffs[i] = a + (b * f.coeffs[i]);
                g.coeffs[i] = b + (c * g.coeffs[i]);
            }
        }
    }

    #[test]
    fn ntt_ntt2() {
        let mut f = Poly::new();
        f.coeffs[0] = COEFF_ONE;
        let a = COEFF_ONE + COEFF_ONE;
        let b = COEFF_ONE + a;

        for _ in 0..10 {
            let mut t = f;
            t.ntt();
            let mut t2 = f;
            f.ntt2(&mut t2);
            assert_eq!(t, t2);

            t.intt();
            assert_eq!(f, t);
            let mut it2 = t2;
            t2.intt2(&mut it2);
            assert_eq!(t, it2);

            for i in 0..N {
                f.coeffs[i] = a + (b * f.coeffs[i]);
            }
        }
    }
}
